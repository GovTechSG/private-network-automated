---
- name: Install pre-requisites
  hosts: all
  tags:
    - bootstrap
    - install
  vars:
    docker_version: "18.02.0~ce-0~ubuntu"
  tasks:
  - name: Upgrade all packages to the latest version
    apt:
      upgrade: yes
      update_cache: yes
    become: yes
  - name: Install Pip
    apt:
      name: python3-pip
      state: present
    become: yes
  - name: Install Docker
    include_role:
      name: ansible-docker-ubuntu
  - name: Install Network time service
    block:
      - name: Disable timedatectl
        shell: timedatectl set-ntp no
        become: yes
      - name: Install ntp
        apt:
          name: ntp
          state: present
        become: yes

####################################################################################################
- name: Bootstrap validators
  hosts:
    - master
    - validators
  tags:
    - bootstrap
  vars:
    # Overwrite exsiting keys or not
    overwrite: false
    # Path to write keys to
    key_path: "{{ playbook_dir }}/keys"
    # Path to write Parity settings files to
    parity_path: "{{ playbook_dir }}/parity"
    # Name of PoA network
    network_name: "DemoPoA"
  tasks:
  - name: Generate ethereum keys
    include_role:
      name: geth-key
    vars:
      account: "{{ inventory_hostname }}"
      path: "{{ key_path }}"
    delegate_to: localhost
    tags:
      - generate_keys
  - name: Generate genesis file
    run_once: true
    delegate_to: localhost
    tags:
      - genesis
    block:
      - name: List of master and validators
        debug:
          var: ansible_play_hosts
      - name: Prepare empty keys array
        set_fact:
          keys: {}
      - name: Read account keys
        set_fact:
          keys: "{{ keys | combine({ item: lookup(\"file\", \"{{ key_path }}/{{ item }}.json\") | from_json }) }}"
        with_items: '{{ ansible_play_hosts }}'
      - name: Print out parsed keys
        debug:
          var: keys
          verbosity: 1
      - name: Create Genesis Block
        include_role:
          name: genesis
        vars:
          master: "{{ keys.master.address }}"
          validators: "{{ keys | json_query('*.address') }}"
          genesis_path: "{{ parity_path }}/genesis.json"
  - name: Generate enode keys
    include_role:
      name: enode-key
    vars:
      account: "{{ inventory_hostname }}"
      path: "{{ key_path }}"
    delegate_to: localhost
    tags:
    - generate_enode
  - name: Generate configuration file
    run_once: true
    delegate_to: localhost
    tags:
      - configuration
    block:
      - name: Prepare empty network keys array
        set_fact:
          # network_private_keys: {}
          network_public_keys: {}
      - name: Read network keys
        set_fact:
          # network_private_keys: "{{ network_private_keys | combine({ item: lookup(\"file\", \"{{ key_path }}/{{ item }}.network\") }) }}"
          network_public_keys: "{{ network_public_keys | combine({ item: lookup(\"file\", \"{{ key_path }}/{{ item }}.network.public\") }) }}"
        with_items: '{{ ansible_play_hosts }}'
      - name: Print out public keys
        debug:
          var: network_public_keys
          verbosity: 1
      - name: Write out template
        template:
          dest: "{{ parity_path }}/authority.toml"
          src: "{{ parity_path }}/authority.template.toml"
  - name: Run the containers
    tags:
      - run
    block:
    - name: Create empty dictionaries
      set_fact:
        keys: {}
        network_private_keys: {}
    - name: Read keys
      set_fact:
        keys: "{{ keys | combine({ item: lookup(\"file\", \"{{ key_path }}/{{ item }}.json\") | from_json }) }}"
        network_private_keys: "{{ network_private_keys | combine({ item: lookup(\"file\", \"{{ key_path }}/{{ item }}.network\") }) }}"
      with_items: '{{ ansible_play_hosts }}'
    - name: Run
      include_role:
        name: run
      vars:
        minter_account: "{{ keys[inventory_hostname].address }}"
        unlock_account: "{{ keys[inventory_hostname].address }}"
        network_key: "{{ network_private_keys[inventory_hostname] }}"
        initial_account: True
        initial_account_key: "{{ lookup('file', '{{ key_path }}/{{ inventory_hostname }}.json') }}"
        initial_account_password: "{{ lookup('file', '{{ key_path }}/{{ inventory_hostname }}.pwd') }}"
        genesis_content: "{{ lookup('file', '{{ parity_path }}/genesis.json') }}"
        config_content: "{{ lookup('file', '{{ parity_path }}/authority.toml') }}"

####################################################################################################
- name: Bootstrap Observers
  hosts:
    - observers
  tags:
    - bootstrap
  vars:
    # Path to write keys to
    key_path: "{{ playbook_dir }}/keys"
    # Path to write Parity settings files to
    parity_path: "{{ playbook_dir }}/parity"
    # List of all validators
    all_validators: '{{ groups["validators"] | union(["master"]) }}'
    # Name of PoA network
    network_name: "DemoPoA"
  tasks:
  - name: Generate configuration file
    run_once: true
    delegate_to: localhost
    tags:
      - configuration
    block:
      - name: List of master and validators
        debug:
          var: all_validators
      - name: Prepare empty network keys array
        set_fact:
          # network_private_keys: {}
          network_public_keys: {}
      - name: Read network keys
        set_fact:
          # network_private_keys: "{{ network_private_keys | combine({ item: lookup(\"file\", \"{{ key_path }}/{{ item }}.network\") }) }}"
          network_public_keys: "{{ network_public_keys | combine({ item: lookup(\"file\", \"{{ key_path }}/{{ item }}.network.public\") }) }}"
        with_items: "{{ all_validators }}"
      - name: Print out public keys
        debug:
          var: network_public_keys
          verbosity: 1
      - name: Write out template
        template:
          dest: "{{ parity_path }}/observer.toml"
          src: "{{ parity_path }}/observer.template.toml"
  - name: Run the containers
    tags:
      - run
    block:
    - name: Run
      include_role:
        name: run
      vars:
        minter_account: ""
        unlock_account: ""
        network_key: ""
        initial_account: False
        initial_account_key: ""
        initial_account_password: ""
        genesis_content: "{{ lookup('file', '{{ parity_path }}/genesis.json') }}"
        config_content: "{{ lookup('file', '{{ parity_path }}/observer.toml') }}"
